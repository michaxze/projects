class User < ActiveRecord::Base

  validates_presence_of :email
  validates_confirmation_of :password

  class << self

    def exists?(email, user=nil)
      found =  if user.nil?
        User.calculate(:count, :email, :conditions => ["email = ?", email])
      else
        User.calculate(:count, :email, :conditions => ["email = ? AND id <> ?", email, user.id])
      end

      (found > 0)
    end

    def find_email_password(email, password)
      find(:first, :conditions => ["email = ? AND password = ?", email, password])
    end
  end

  def create_update(params)
    if self.new_record?
      params[:password] = Helper.encrypt_password(Helper::DEFAULT_PASSWORD, params[:email])
      params[:password_confirmation] = params[:password]
    end

    self.firstname = params[:firstname] unless params[:firstname].blank?
    self.lastname = params[:lastname] unless params[:lastname].blank?
    self.email = params[:email] unless params[:email].blank?
    self.role_code = params[:role_code] unless params[:role_code].blank?
    self.save!
  end

  def reset_password
    self.update_attribute(:password, Helper.encrypt_password(Helper::DEFAULT_PASSWORD, self.email))
  end

  def change_password(params)
    params[:password]              = Helper.encrypt_password(params[:password], self.email)
    params[:password_confirmation] = Helper.encrypt_password(params[:password_confirmation], self.email)
    self.attributes = params
    self.save!
  end

  def fullname
     "#{self.firstname} #{self.lastname}"
  end

  def admin?
    self.role_code.to_s == 'admin'
  end

end
